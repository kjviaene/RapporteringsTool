@model TrustteamVersion4.Models.ViewModels.TableViewModel

<script type="text/javascript" src="~/js/tableSorter.js"></script>
<script type="text/javascript" src="~/js/tableClose.js"></script>
<style>
	.active {
		background: #ffd800 !important;
	}
</style>
<!-- table test -->
<div id="tableDiv">
	<table class="table table-striped table-condensed table-bordered table-responsive">
		<tr>
			<!--
			- Overlopen van elke property van een Home om deze weer te geven in de tabel.
			- De properties worden vergeleken door de methode IsShown van TableViewModel om te kijken of ze moeten weergegeven worden
			- De eerste ActionLink linkt naar de methode die toelaat om kolommen te sluiten. de class closeable zorgt voor een afbeelding
			- De tweede ActionLink linkt naar de methode die toelaat om kolommen te sorteren.
			- de id is voor het herkennen van de kolom waarop men heeft geklikt. Het id is steeds gelijk aan een attribuut van Home object
					-->
			<th>N°</th>
			@{
				string id = "";
				foreach (var prop in Model.PropertiesAsString)
				{
					id = prop;
					if (Model.IsShown(prop))
					{
						<th id="@id">
							@Html.ActionLink("", "CloseColumnPartial", "Home", new { closed = prop }, new { @class = "closeable " })
							@Html.ActionLink(prop, "SortPartial", "Home", new { sorter = @id }, new { @class = "sortable col-lg-5" })

						</th>
					}
				}


			}
		</tr>
		<!-- Het overlopen van alle Home objecten die werden meegeven in het model en het printen hiervan in de tabel
			- De data moeten speciaal worden afgedrukt omdat de tijd data vaak verkeerde datums hebben en de datums vaak verkeerde timestamps hebben.
			- De Dictionary cutDate bevat de data die reeds geknipt is naar het juiste formaat (dit gebeurd in Home klasse)
			- De Dictionary is als volgt gestructureerd: [SupportCallOpenDate,(1/09/1939)][SupportCallOpenTime,(2/09/1945),...]
			- Zo halen we dus steeds de juiste datum uit op basis van welke property wordt weergegeven.
			- De counter zorgt gewoon voor een extra kolom waarin het aantal rijen wordt geteld.
			- -->
		@{ int counter = 1;
			Dictionary<string, string> cutDate;
			List<string> dateToCut = new List<string> { "SupportCallOpenDate", "SupportCallOpenTime", "SupportCallClosedDate", "SupportCallClosedTime" };
			foreach (var item in Model.Data)
			{
				cutDate = item.CutDates();

				<tr>
					<td>@counter</td>
					@{
						foreach (var prop in Model.Properties)
						{
							string text = prop.GetValue(item) == null ? "" : prop.GetValue(item).ToString();
							if (text.Equals("NULL"))
							{
								<td></td>
							}
							else if (Model.IsShown(prop.Name) && !(dateToCut.Contains(prop.Name)) && !text.Equals("NULL"))
							{
								<td> @text </td>
							}
							else if (Model.IsShown(prop.Name) && dateToCut.Contains(prop.Name) && !text.Equals("NULL"))
							{
								<td> @cutDate[prop.Name] </td>
							}


						}
						counter = counter + 1;
					}
				</tr>
			}
		}
	</table>
</div>































