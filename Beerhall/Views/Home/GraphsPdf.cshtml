@model TrustteamVersion4.Models.ViewModels.GraphsViewModel
@using TrustTeamVersion4
@using TrustTeamVersion4.Models
@using TrustTeamVersion4.Models.Domain
@using TrustteamVersion4.Models.ViewModels

<!-- Alle variabelen die nodig zijn voor de verschillende grafieken. Ze worden steeds uit de ViewData gehaald en in een variabele geplaatst omdat dit anders soms voor problemen zorgt-->

@{
	string[] xas = Model.EfficiencyString;
	double[] yas = Model.EfficiencyDouble;
	List<string> impacts = Model.impacts;
	List<string> urgenties = Model.urgenties;
	int[,] Priorities = Model.prioriteiten;
	List<string> categories = Model.Categories;
	int[] NrPerCategory = Model.NrPerCategory;
	List<string> uniqueGroups = Model.uniqueGroups;
	List<string> allNames = Model.allNames;
	MultiKeyDictionary<string, string, int> namesPerGroup = Model.namesPerGroup;

}
<head>
	<!-- De Graphs pages gebruiken een aparte layout omdat deze toegang dient te krijgen tot het model van deze pagina's. Dit kan niet doorgegeven worden
		aan de Layout als deze gebruikt wordt door meerdere views die verschillende models gebruiken. Aangezien het overzichtelijker is van deze code wel
		apart te houden gebruiken we dus een kopie met wat toevoegingen voor de graphs pagina (weg laten van de header op de pdf versie)-->
	@{
		ViewData["Title"] = "Graphs";
		Layout = "~/Views/Shared/_LayoutGraphs.cshtml";
	}

	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	<!-- Dit script tekent alle grafieken.-->
	<script type="text/javascript">
		//debugger;
// Load the Visualization API and the corechart package.
	google.charts.load('current', { 'packages': ['corechart'] });
	// Set a callback to run when the Google Visualization API is loaded. (Het oproepen van elke teken function)
	google.charts.setOnLoadCallback(drawAmountPerCategory);
	google.charts.setOnLoadCallback(drawIncNivStacked);
	google.charts.setOnLoadCallback(drawIncNiv);
	google.charts.setOnLoadCallback(drawEfficiency);

	// Callback that creates and populates a data table,instantiates the pie chart, passes in the data and draws it.
		function drawEfficiency() {
		// Create the data table. Het vullen van de tables gebeurt automatisch met een for loop. Een for loop is hier handiger dan een foreach omdat de iterator kan gebruikt worden.
		var data = new google.visualization.DataTable();
		@{
			@:data.addColumn('string', 'Status');
			@:data.addColumn('number','Aantal');

			for (var k = 0; k < @yas.Length; k++)
			{
				@:data.addRows([['@xas[k]',@yas[k]]]);
			}
		}

		// Set chart options, de width en height worden statisch ingesteld voor de pdf versie. Er werden meerdere technieken geprobeer om dit te kunnen omzeilen
		// maar met de huidige versie van Rotatia lijkt er geen enkele oplossing geschikt voor onze situatie. Daarom zijn we verplicht van deze grootte statisch
		// in te geven. Als we dit niet doen dan zijn de grafieken te klein in de pdf versie.
		var options = {
			'title': 'Aantal tickets in functie van de status',
			'width': '1140',
			'height': '200',
		};
		// Instantiate and draw our chart, passing in some options.
		// De listener wordt geactiveerd van zodra de chart een ready signaal uitzend. Dit moet voor de draw function staan
		// voor in het geval dat de draw function te snel zou uitgevoerd worden zodanig de Listener in een state zou kunnen terecht komen waar hij
		// nooit het ready signaal krijgt (aangezien de draw functie deze al reeds zou gestuurd hebben en dit niet opnieuw doet)

			var my_div = document.getElementById('chart_div')
			var chart = new google.visualization.PieChart(my_div);
			google.visualization.events.addListener(chart, 'ready', function () { 
				my_div.innerHTML = 'img src="' + chart.getImageURI() + '">';
				window.status = "ready";
				
			});
		chart.draw(data, options);
	};
	// Grafiek voor het tonen van het aantal tickets per Support Call Category
	function drawAmountPerCategory()
	{

		var data = new google.visualization.DataTable();
		// De type/role kolom is voor de totaal cijfers die telkens aan de grafiek vasthangen.
		data.addColumn('string', 'Categorie');
		data.addColumn('number', 'Aantal');
		data.addColumn({ type: 'number', role: 'annotation' })
		@{
			for (var c = 0; c < categories.Count(); c++)
			{
				if (!(NrPerCategory[c] == 0))
				{
					string categorie = categories[c];

					@:data.addRows([['@categorie',@NrPerCategory[c],@NrPerCategory[c]]]);
				}
			}

		}
		// De slantedText variabele is zodat de tekst wordt afgekort. Indien deze niet scheef staat dan wordt te lange tekst simpelweg niet getoond.
		// De legend wordt ook uitgezet omdat dit overbodig is in ons geval waar we maar 1 waarde tonen (aantal tickets)
		var options = {
			title: 'Aantal tickets per categorie',
			'width': '1140',
			'height': '200',
			hAxis: {
				title: 'Categorieën',
				slantedText: true
			},
			chartArea: {
				top: 28,
				height: '40%',
				width: '80%'
			},
			vAxis: {
				title: 'Aantal'
			},
			legend: {position: 'none'}
		};
		data.sort([{ column: 1, desc: true }]);
		var categorieChart = new google.visualization.ColumnChart(document.getElementById('cat_chart'));
		categorieChart.draw(data, options);

	}
	// Grafiek die toont hoeveel tickets er in elke incident klasse vallen (P1,P2,...)
	function drawIncNiv()
	{

		var data = new google.visualization.DataTable();
		data.addColumn('string', 'Soort incident');
		data.addColumn('number', 'Aantal');
		data.addColumn({ type: 'number', role: 'annotation' })

		data.addRows([['P1',@Priorities[1, 1],@Priorities[1, 1]]]);
		data.addRows([['P2',@Priorities[1, 2] + @Priorities[2, 1],@Priorities[1, 2] + @Priorities[2, 1]]]);
		data.addRows([['P3',@Priorities[1, 3] + @Priorities[2, 2] + @Priorities[3, 1],@Priorities[1, 3] + @Priorities[2, 2] + @Priorities[3, 1]]]);
		data.addRows([['P4',@Priorities[2, 3] + @Priorities[2, 4] + @Priorities[3, 2] + @Priorities[3, 3] + @Priorities[1, 4],@Priorities[2, 3] + @Priorities[2, 4] + @Priorities[3, 2] + @Priorities[3, 3] + @Priorities[1, 4]]]);
		data.addRows([['P5',@Priorities[3, 4],@Priorities[3, 4]]]);


		var options = {
			title: 'Aantal tickets per Incident niveau',
			'width': '1140',
			'height': '200',
			hAxis: {
				title: 'Incident niveau',

			},
			vAxis: {
				title: 'Aantal tickets'
			},
			chartArea: {
				top: 28,
				height: '40%',
				width: '80%'
			},
			legend: { position: 'none' }
		};


		var categorieChart = new google.visualization.ColumnChart(document.getElementById('incniv_chart'));
		categorieChart.draw(data, options);
	}
	// Deze grafiek toont per Support Call Impact het aantal tickets per Support Call Urgency. Dit door gebruik te maken van stacked grafieken.
	function drawIncNivStacked()
	{

		var data = new google.visualization.DataTable();
		data.addColumn('string', 'Impact');
		data.addColumn('number', 'Unable to Work');
		data.addColumn('number', 'Critical Business Process Unavailable');
		data.addColumn('number', 'Normal Business Process Unavailable');
		data.addColumn('number', 'Incident, but Workaround Available');
		data.addColumn('number', 'Service Request');
		data.addColumn('number', 'Not Set');
		data.addColumn({ type: 'number', role: 'annotation' });

		@{for (var m = 1; m < impacts.Count() + 1; m++)
			{
				int som = Priorities[m, 1] + Priorities[m, 2] + Priorities[m, 3] + Priorities[m, 4] + Priorities[m, 5] + Priorities[m, 6];

				@:data.addRows([['@impacts[m - 1]', @Priorities[m, 1], @Priorities[m, 2], @Priorities[m, 3], @Priorities[m, 4], @Priorities[m, 5], @Priorities[m, 6], @som]]);

			}
		}


		var options = {
			title: 'Aantal tickets per Impact',
			'width': '1140',
			'height': '200',
			isStacked: true,
			vAxis: {
				title: 'Aantal tickets'
			},
			chartArea: {
				top: 28,
				height: '70%',
				width: '80%'
			}
		};


		var categorieChart = new google.visualization.ColumnChart(document.getElementById('incnivStacked_chart'));
		categorieChart.draw(data, options);
	}
		// Om een onbekende reden worden de grafieken niet opnieuw getekend als deze view wordt opgeropen via de PrintPdf() methode. daarom activeren we deze methode
		// telkens als <body> geladen wordt (onload). Zo worden de grafieken wel weergegeven in de pdf.
		function CallBackForDrawingPdf() {
			drawAmountPerCategory();
			drawIncNivStacked();
			drawIncNiv();
			drawEfficiency();
		}


		function myReadyHandler() {
			window.status = "ready";
		}

	</script>

</head>
<body >


	<!-- De incidenten tabel. De eerste foreach loop overloopt alle urgenties om deze in de table header te plaatsen.
		 De tweede foreach loop overloopt alle verschillende impacten om deze in de eerste kolom te plaatsen.
		 In deze loop loopt nog een foreach loop die de rest van de kolommen aanvult met steeds het juiste aantal incidenten die daar thuis hoort.
		 De waarden worden geïnitialiseerd op 1 omdat de 0,* en *,0 rijen niets bevatten. (zie HomeRepository voor de uitleg hieromtrent.
		 De ActionLink roept de SlaFilter op van de HomeController en toont de tickets die werden geteld.-->
	<table class="table table-striped table-condensed table-bordered table-responsive table-hover">
		<tr>
			<th>Impact</th>
			@{
				foreach (var urg in urgenties)
				{
					<th>@urg</th>
				}

			}
		</tr>
		@{
			int counter_imp = 1;
			foreach (var mod in impacts)
			{
				int counter_urg = 1;
				<tr>
					<td>@mod</td>
					@{
						foreach (var urg in urgenties)
						{
							string value = @Priorities[counter_imp, counter_urg].ToString();
							<td>@value</td>
							counter_urg++;
						}

						counter_imp++;
					}
				</tr>
			}
		}
	</table>
	<div id="chartparent">
		<!-- De div elementen bevatten elk een grafiek. De lijnen (hr) zijn puur voor wat overzicht op de pagina te creëren.-->
		@*<hr style="width: 100%; color: black; height: 3px; background-color:dimgrey;" />
		<div id="cat_chart"></div>
		<div id="test_chart"></div>
		<div id="incniv_chart"></div>
		<div id="incnivStacked_chart"></div>
		<div id="chart_div"></div>*@
		<!-- De tabel waar per groep staat hoeveel tickets een persoon heeft behandeld.-->
		<br />

		<hr style="width: 100%; color: black; height: 3px; background-color:dimgrey;" />
	</div>
	<h4>PIVOT</h4>
	<br />
	@{
		<table class="table table-condensed table-bordered table-responsive table-striped table-hover ">
			@{int nr = 0;
				int counter = 0;}
			@{
				// Overlopen van alle groepen
				foreach (var gr in uniqueGroups)
				{
					string amount = "";
					string id1 = ".group" + nr.ToString();
					string id2 = "group" + nr.ToString();

					// Overlopen van alle namen in deze groep en tellen heoveel dit er zijn voor de som weer te kunnen geven
					foreach (var n in allNames)
					{
						if (namesPerGroup.ContainsKey(gr, n))
						{
							counter = counter + namesPerGroup[gr, n];
						}
					}
					// Maken van de header, als de groep null is dan geven we dit weer als Not Set en in het rood
					if (gr.Equals("NULL"))
					{
						<tr>
							<th colspan="2" data-toggle="collapse" data-target="@id1" class="clickable danger">Not Set <b style="float: right;">@counter</b></th>
						</tr>
					}
					else
					{
						<tr>
							<th colspan="2" data-toggle="collapse" data-target="@id1" class="clickable info">@gr <b style="float: right;">@counter</b></th>
						</tr>
					}
					// Printen van alle namen en het aantal keer dat ze een ticket behandelden.
					foreach (var n in allNames)
					{
						if (namesPerGroup.ContainsKey(gr, n))
						{
							<tr>
								<td class="collapse in @id2 "> <i>@n </i> <i style="float: right;">@amount </i></td>
							</tr>
						}
					}

					nr++;
					counter = 0;
				}
			}
		</table>
	}
</body>
