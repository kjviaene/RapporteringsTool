@model IEnumerable<TrustTeamVersion4.Models.Domain.Home>
@using TrustTeamVersion4
@using TrustTeamVersion4.Models
@using TrustTeamVersion4.Models.Domain
@{
	ViewData["Title"] = "Graphs";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<!-- <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script> -->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<!-- Titel en de gekozen filter-->
<h2>Graphs</h2>
<h3>@ViewBag.filter</h3>
<!-- Alle variabelen die nodig zijn voor de verschillende grafieken. Ze worden steeds uit de ViewData gehaald en in een variabele geplaatst omdat dit anders soms voor problemen zorgt-->
@{
	string[] xas = (string[])ViewData["EfficiencyString"];
	double[] yas = (double[])ViewData["EfficiencyDouble"];
	List<string> impacts = (List<string>)ViewData["Impacts"];
	List<string> urgenties = (List<string>)ViewData["Urgenties"];
	int[,] Priorities = (int[,])ViewData["Prioriteiten"];
	List<string> categories = (List<string>)ViewData["Categories"];
	int[] NrPerCategory = (int[])ViewData["NrPerCategory"];
	List<string> uniqueGroups = (List<string>)ViewData["uniqueGroups"];
	List<string> allNames = (List<string>)ViewData["allNames"];
	MultiKeyDictionary<string, string, int> namesPerGroup = (MultiKeyDictionary<string, string, int>)ViewData["namesPerGroup"];

}

<!-- De incidenten tabel. De eerste foreach loop overloopt alle urgenties om deze in de table header te plaatsen.
	 De tweede foreach loop overloopt alle verschillende impacten om deze in de eerste kolom te plaatsen.
	 In deze loop loopt nog een foreach loop die de rest van de kolommen aanvult met steeds het juiste aantal incidenten die daar thuis hoort.
	 De waarden worden geïnitialiseerd op 1 omdat de 0,* en *,0 rijen niets bevatten. (zie HomeRepository voor de uitleg hieromtrent.
	 De ActionLink roept de SlaFilter op van de HomeController en toont de tickets die werden geteld.-->

<table class="table table-striped table-condensed table-bordered table-responsive table-hover">
	<tr>
		<th>Impact</th>
		@{
			foreach (var urg in urgenties)
			{
				<th>@urg</th>
			}

		}
	</tr>
	@{
		int counter_imp = 1;
		foreach (var mod in impacts)
		{
			int counter_urg = 1;
			<tr>
				<td>@mod</td>
				@{
					foreach (var urg in urgenties)
					{
						string value = @Priorities[counter_imp, counter_urg].ToString();
						<td>@Html.ActionLink(value, "SlaFilter", new { imp = @impacts[counter_imp - 1], urg = @urgenties[counter_urg - 1] })</td>
						counter_urg++;
					}

					counter_imp++;
				}
			</tr>
		}
	}
</table>


<!-- De div elementen bevatten elk een grafiek. De lijnen (hr) zijn puur voor wat overzicht op de pagina te creëren.-->
<hr style="width: 100%; color: black; height: 3px; background-color:dimgrey;" />
<div id="cat_chart"></div>
<hr style="width: 100%; color: black; height: 3px; background-color:dimgrey;" />
<div id="incniv_chart"></div>
<hr style="width: 100%; color: black; height: 3px; background-color:dimgrey;" />
<div id="incnivStacked_chart" style="height: 100%;"></div>
<hr style="width: 100%; color: black; height: 3px; background-color:dimgrey;" />
<div id="chart_div"></div>

<!-- De tabel waar per groep staat hoeveel tickets een persoon heeft behandeld.-->

<hr style="width: 100%; color: black; height: 3px; background-color:dimgrey;" />
<h4>PIVOT</h4>
<div>

	@{
		<table class="table table-condensed table-bordered table-responsive ">
			@{int nr = 0; }

			@{
				foreach (var gr in uniqueGroups)
				{
					string id1 = ".group" + nr.ToString();
					string id2 = "group" + nr.ToString();
					<tr>
						<th colspan="2" data-toggle="collapse" data-target="@id1" class="clickable">@gr</th>
					</tr>
					foreach (var n in allNames)
					{
						if (namesPerGroup.ContainsKey(gr, n))
						{
							<tr>
								<td  class="collapse @id2 "> <i>@n </i> <i style="float: right;">@namesPerGroup[gr, n] </i></td>
							</tr>
						}
					}

					nr++;
				}
			}


		</table>
	}

</div>
<div><br /></div>
<div>	<br /></div>

<!-- Dit script tekent alle grafieken.-->
<script type="text/javascript">

// Load the Visualization API and the corechart package.
	google.charts.load('current', { 'packages': ['corechart'] });
	// Set a callback to run when the Google Visualization API is loaded. (Het oproepen van elke teken function)
	google.charts.setOnLoadCallback(drawAmountPerCategory);
	google.charts.setOnLoadCallback(drawEfficiency);
	google.charts.setOnLoadCallback(drawIncNivStacked);
	google.charts.setOnLoadCallback(drawIncNiv);

	// Callback that creates and populates a data table,instantiates the pie chart, passes in the data and draws it.
	function drawEfficiency() {
		// Create the data table. Het vullen van de tables gebeurt automatisch met een for loop. Een for loop is hier handiger dan een foreach omdat de iterator kan gebruikt worden.
		var data = new google.visualization.DataTable();
		@{
			@:data.addColumn('string', 'Status');
			@:data.addColumn('number','Aantal');

			for (var k = 0; k < @yas.Length; k++)
			{
				@:data.addRows([['@xas[k]',@yas[k]]]);
			}
		}

		// Set chart options
		var options = {
			'title': 'Aantal tickets in functie van de status',
			'width': 800,
			'height': 600
		};
		// Instantiate and draw our chart, passing in some options.
		var chart = new google.visualization.PieChart(document.getElementById('chart_div'));
		chart.draw(data, options);
	}
	// Grafiek voor het tonen van het aantal tickets per Support Call Category
	function drawAmountPerCategory()
	{

		var data = new google.visualization.DataTable();
		// De type/role kolom is voor de totaal cijfers die telkens aan de grafiek vasthangen.
		data.addColumn('string', 'Categorieën');
		data.addColumn('number', 'Aantal');
		data.addColumn({ type: 'number', role: 'annotation' })
		@{
			for (var c = 0; c < categories.Count(); c++)
			{
				if (!(NrPerCategory[c] == 0))
				{ string categorie = categories[c];

					@:data.addRows([['@categorie',@NrPerCategory[c],@NrPerCategory[c]]]);
				}
			}

		}
		// De slantedText variabele is zodat de tekst wordt afgekort. Indien deze niet scheef staat dan wordt te lange tekst simpelweg niet getoond.
		// De legend wordt ook uitgezet omdat dit overbodig is in ons geval waar we maar 1 waarde tonen (aantal tickets)
		var options = {
			title: 'Aantal tickets per categorie',
			hAxis: {
				title: 'Categorieën',
				slantedText: true
			},
			chartArea: {
				top: 28,
				height: '40%',
				width: '80%'
			},
			vAxis: {
				title: 'Aantal'
			},
			legend: {position: 'none'}
		};
		data.sort([{ column: 1, desc: true }]);
		var categorieChart = new google.visualization.ColumnChart(document.getElementById('cat_chart'));
		categorieChart.draw(data, options);
	}
	// Grafiek die toont hoeveel tickets er in elke incident klasse vallen (P1,P2,...)
	function drawIncNiv()
	{

		var data = new google.visualization.DataTable();
		data.addColumn('string', 'Soort incident');
		data.addColumn('number', 'Aantal');
		data.addColumn({ type: 'number', role: 'annotation' })

		// Dit kan niet geautomatiseerd worden omdat de P benamingen geen evenredig verband hebben met hun locatie, dus moet dit handmatig gebeuren
		@*@{
			for (var m = 1; m < impacts.Count(); m++)
			{
				for (var i = 1; i < urgenties.Count(); i++)
				{

					@:data.addRows([['P @i',@Priorities[m, i]]]);
				}
			}
			}*@
		data.addRows([['P1',@Priorities[1,1],@Priorities[1, 1]]]);
		data.addRows([['P2',@Priorities[1,2] + @Priorities[2,1],@Priorities[1,2] + @Priorities[2,1]]]);
		data.addRows([['P3',@Priorities[1,3] + @Priorities[2,2] + @Priorities[3,1],@Priorities[1,3] + @Priorities[2,2] + @Priorities[3,1]]]);
		data.addRows([['P4',@Priorities[2,3] + @Priorities[2,4] + @Priorities[3,2] + @Priorities[3,3] + @Priorities[1,4],@Priorities[2,3] + @Priorities[2,4] + @Priorities[3,2] + @Priorities[3,3] + @Priorities[1, 4]]]);
		data.addRows([['P5',@Priorities[3,4],@Priorities[3, 4]]]);


		var options = {
			title: 'Aantal tickets per Incident niveau',
			hAxis: {
				title: 'Incident niveau',

			},
			vAxis: {
				title: 'Aantal tickets'
			},
			chartArea: {
				top: 28,
				height: '40%',
				width: '80%'
			},
			legend: { position: 'none' }
		};


		var categorieChart = new google.visualization.ColumnChart(document.getElementById('incniv_chart'));
		categorieChart.draw(data, options);
	}
	// Deze grafiek toont per Support Call Impact het aantal tickets per Support Call Urgency. Dit door gebruik te maken van stacked grafieken.
	function drawIncNivStacked()
	{

		var data = new google.visualization.DataTable();
		data.addColumn('string', 'Impact');
		data.addColumn('number', 'Unable to Work');
		data.addColumn('number', 'Critical Business Process Unavailable');
		data.addColumn('number', 'Normal Business Process Unavailable');
		data.addColumn('number', 'Incident, but Workaround Available');
		data.addColumn('number', 'Service Request');
		data.addColumn('number', 'Not Set');
		data.addColumn({ type: 'number', role: 'annotation' });

		@{for (var m = 1; m < impacts.Count()+1; m++)
			{
				int som = Priorities[m, 1] + Priorities[m, 2] + Priorities[m, 3] + Priorities[m, 4] + Priorities[m, 5] + Priorities[m, 6];

				@:data.addRows([['@impacts[m-1]', @Priorities[m, 1], @Priorities[m, 2], @Priorities[m, 3], @Priorities[m, 4], @Priorities[m, 5], @Priorities[m, 6], @som]]);

			}
		}


		var options = {
			title: 'Aantal tickets per Impact',
			isStacked: true,
			vAxis: {
				title: 'Aantal tickets'
			},
			chartArea: {
				top: 28,
				height: '70%',
				width: '80%'
			}
		};


		var categorieChart = new google.visualization.ColumnChart(document.getElementById('incnivStacked_chart'));
		categorieChart.draw(data, options);
	}



</script>

<!-- Dit script is momenteel buiten gebruik, de ActionLinks vervangen dit -->
<script type="text/javascript">
	$("#toon_1_1").click(function () {
		alert("hey");
		$.ajax({
			url: 'Home',
			data: { imp: @impacts[0], urg: @urgenties[0] }
		})
		@*window.location.href = '@Url.Action("SlaFilter","Home") + @impacts[0] + @urgenties[0] )'
		$.post("@Url.Action("SlaFilter")", {row : @impacts[0], col : @urgenties[0]})*
		document.post("@Url.Action("SlaFilter")", {row : @impacts[0], col : @urgenties[0]});*@
	});
	function test()
	{
		$.ajax({
			url: 'Home',
			data: { imp: @impacts[0], urg: @urgenties[0] }
		})
	 }
</script>

